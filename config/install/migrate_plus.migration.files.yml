# This migration demonstrates a simple import from a JSON file.
id: files
label: Files Import
migration_group: json_import
migration_tags:
- json example
source:
  # We use the JSON source plugin.
  plugin: url
  # In this example we get data from a local file, to get data from a URL
  # define http as data_fetcher_plugin.
  # data_fetcher_plugin: http
  data_fetcher_plugin: file
  data_parser_plugin: json
  # The data_parser normally limits the fields passed on to the source plugin
  # to fields configured to be used as part of the migration. To support more
  # dynamic migrations, the JSON data parser supports including the original
  # data for the current row. Simply include the 'include_raw_data' flag set
  # to `true` to enable this. This option is disabled by default to minimize
  # memory footprint for migrations that do not need this capability.
  # include_raw_data: true
  # Flags whether to track changes to incoming data. If TRUE, we will maintain
  # hashed source rows to determine whether incoming data has changed.
  # track_changes: true
  # Copy the example JSON file in artifacts folder to sites/default/files folder.
  urls:
  - 'public://migrate_json_example/pages.json'
  # An xpath-like selector corresponding to the items to be imported.
  item_selector: documents
  fields:
  - name: id
    label: 'Unique ID'
    selector: id
  -
    name: url
    label: 'File path'
    selector: url

  # Under 'ids', we identify source fields populated above which will uniquely
  # identify each imported item. The 'type' makes sure the migration map table
  # uses the proper schema type for stored the IDs.
  ids:
    id:
      type: string

process:
  bundle:
    plugin: default_value
    default_value: file
  uid:
    plugin: default_value
    default_value: 1
  name:
  - plugin: callback
    callable: basename
    source: url
  field_media_file:
    plugin: file_import
    source: url
    destination_dir: 'public://'

destination:
  plugin: entity:media
migration_dependencies: {  }
